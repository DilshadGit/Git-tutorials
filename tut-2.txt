# This (git diff) Show unstaged differences since last commit.
- git diff


# When you add the file to staged area and run git diff doesn't display any changes
- git add tut-2.txt
# if we run git diff tut-2.txt doesn't show anything
 - git diff tut-2.txt


 # If we not add the file to the stage area (in current branch). But if we made some changes in the tut-2.txt file and run the git diff file name like tut-2.txt show the changes has made
 - git diff tut-2.txt

Example:
    Git-tutorials$ git diff 
    diff --git a/tut-2.txt b/tut-2.txt
    index e69de29..f0dce39 100644
    --- a/tut-2.txt
    +++ b/tut-2.txt
    @@ -0,0 +1,11 @@
    +git diff
    +
    +This (git diff) Show unstaged differences since last commit.
    +
    +git add tut-2.txt
    +
    +When you add the file to staged area and run git diff doesn't display any change because we alread
    +added to stage area (to current branch). But if we change some more in the tut-2.txt file and run
    +git diff will show the changes has been done before add to the branch.
    +
    +

git diff --staged

# Th above example will show in terminal red is the old file and green is the new change


# Now we add the file to stage area or say server 
 - git add tut-2.txt

 * if we run git diff tut-2.txt nothing display because already added to the server (stage)

 # to show the change we have to run:
   - git diff --staged tut-2.txt file 
   * display the change has been made.

Example:
    % git diff --staged tut-2.txt
    diff --git a/tut-2.txt b/tut-2.txt
    index a3534df..53e17c9 100644
    --- a/tut-2.txt
    +++ b/tut-2.txt
    @@ -1,34 +1,40 @@
    -git diff
    +# This (git diff) Show unstaged differences since last commit.
    +- git diff
    
    -This (git diff) Show unstaged differences since last commit.
    
    -git add tut-2.txt
    +# When you add the file to staged area and run git diff doesn't display any changes
    +- git add tut-2.txt
    +# if we run git diff tut-2.txt doesn't show anything
    + - git diff tut-2.txt

# NOTICE:
   * git diff file.txt  >> used before add to the server(stage)
   * git diff --staged file.txt >> used after added to the server(stage)


# rest HEAD is another command used when you create file and added to the stage or server
 - git add file.txt
 * when we run git status shows that the file added to the stage to unstaged again use
 - git reset HEAD file.txt   (This is like undo the file from adding)    


# Next checkout command used when you add file to stage than you run git status to show you
# which file in the stage, and  we decide to unstage the file run git reset HEAD file.txt
 - git add file.txt
 - git status 
 # Now we unstage the file back to local
 - git reset HEAD file.txt
 - git status   (now display the change has been made like history)
 * To destroy all changes hase been made since last commit run:
 - git checkout -- file.txt
 • if we run the status command again doesn't show anything changed.
 - git status


# Abother way to add and commit the file in one line made some change in files.
 - git commit -a -m 'How to git add and commit in one line'

Example:
  git commit -a -m 'Using git commit -a -m msg in one line.'
  [main dd65c58] Using git commit -a -m msg in one line.
   2 files changed, 4 insertions(+), 2 deletions(-)

Notice: 
 * 2 file has made some changed and used git commit -a -m 'the message'


# Next another changed made in file.txt added and commited to the stage to undo this file
 - git reset --soft HEAD^
 * what is happening after will undo or unstaged the file back to the local after commit
 - git status (display unstaged the file back to local )


# we add file and commited to stage area and we decide to add some more messages we forgot
  to write in the last commit we use --amend 
  - git add file.txt
  = git commit --amend -m 'How to use amend command with commit adding extra msg to last commit'


# The reset --soft HEAD^ is undo last commit, put changes into staging
 - git reset --soft HEAD^  (Undo commit, put changes into staging)
 - get commit --amend -m 'Add new msg to last commit'  (change the last commit)
 - git reset --hard HEAD^  (Undo last commit and all changes)
 - git reset --hard HEAD^^  (Undo the last 2 commit and all changes)




Notice: 
 * 2 file has made some changed and used git commit -a -m 'the message'


# Next another changed made in file.txt added and commited to the stage to undo this file
 - git reset --soft HEAD^
 * what is happening after will undo or unstaged the file back to the local after commit
 - git status (display unstaged the file back to local )


# we add file and commited to stage area and we decide to add some more messages we forgot
  to write in the last commit we use --amend 
  - git add file.txt
  = git commit --amend -m 'How to use amend command with commit adding extra msg to last commit'


# Push and Pull with Remote
# We create new repo on github and connecting from local machine using remote
GitHub:

# Create new Repository on https://.github.com/newrepo
# This is optional >>which is included README.md file and .gitignore

touch GUIDE.md
git init
git commit -a -m 'Add new file all in one line'
git remote add origin git@github.com:DilshadGit/newrepo.git
git push -u origin main


 - git remote add origin https://github.com/Dilshadgit/repositoryname

# The (add) New remote
# The (origin) Our name for this remote
# The (https://github.com/Dilshadgit/repositoryname) Is the address

# The (-v) show remote repositories
 - git remote -v
 - origin https://github.com:DilshadGit/newrepo.git (fetch)
 - origin https://github.com:DilshadGit/newrepo.git (push)

# Push to Remote
 - git push -u origin main

# NOTICE:
 # The (origin) remote repository name
 # The (main) local branch to push

 # In this case the terminal required:
 # username of gitgub account and password

   - git pull <-- this pull the changes to the machine

 # Working with remote repository:

 # To add new remots:
  - git remote add <name> <address> (Look at line 159)

 # To remove remotes:
  - git remote rm <name>

 # To push to remote:
  - git push -u <name> <branch>

 # The <branch> Usually is master branch
  - The (-u) Is used first but the next time not need to specify the branch name just run git push


HEROKU REMOTE:

# create the branch and showing git repo ssh address
$ - heroku create


Example:
Git-tutorials$ heroku create
Creating app... !
 ▸    Invalid credentials provided.
heroku: Press any key to open up the browser to login or q to exit:
Opening browser to https://cli-auth.heroku.com/auth/cli/browser/9e002c8e-aeef-4c08-8f39-fa504bcc49de?requestor=SFMyNTY.g2gDbQAAAA44NS4yNTUuMjM0LjIxMG4GAIjx622AAWIAAVGA.1i_Y8j61a2CiLIYqZFZODcyverUdLOPBVbaS1PVwS0U
heroku: Waiting for login... ⣽

git remote -v

git push heroku master --> this will triggers deploy

IMPORTANT NOTICE:

All the commands below is used before push to the branch, Don't do these after you push

git reset --soft HEAD^
git commit --amend -m 'New message'
git reset --hard HEAD^
git reset --hard HEARD^^

# Don't use or run this command after pushed!!!

